# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import trafficLight_pb2 as trafficLight__pb2


class trafficLightStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerResponse = channel.unary_unary(
                '/trafficLight.trafficLight/GetServerResponse',
                request_serializer=trafficLight__pb2.Message.SerializeToString,
                response_deserializer=trafficLight__pb2.MessageResponse.FromString,
                )


class trafficLightServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetServerResponse(self, request, context):
        """A simple RPC.
        Obtains the MessageResponse at a given position.
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_trafficLightServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerResponse': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerResponse,
                    request_deserializer=trafficLight__pb2.Message.FromString,
                    response_serializer=trafficLight__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trafficLight.trafficLight', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class trafficLight(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetServerResponse(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficLight.trafficLight/GetServerResponse',
            trafficLight__pb2.Message.SerializeToString,
            trafficLight__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class controllerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.trafficLightToController = channel.unary_unary(
                '/trafficLight.controller/trafficLightToController',
                request_serializer=trafficLight__pb2.Message.SerializeToString,
                response_deserializer=trafficLight__pb2.MessageResponse.FromString,
                )
        self.controllerToTrafficLight = channel.unary_unary(
                '/trafficLight.controller/controllerToTrafficLight',
                request_serializer=trafficLight__pb2.Message.SerializeToString,
                response_deserializer=trafficLight__pb2.MessageResponse.FromString,
                )
        self.controllerToLTA = channel.unary_unary(
                '/trafficLight.controller/controllerToLTA',
                request_serializer=trafficLight__pb2.Message.SerializeToString,
                response_deserializer=trafficLight__pb2.MessageResponse.FromString,
                )
        self.LTAToController = channel.unary_unary(
                '/trafficLight.controller/LTAToController',
                request_serializer=trafficLight__pb2.Message.SerializeToString,
                response_deserializer=trafficLight__pb2.MessageResponse.FromString,
                )


class controllerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def trafficLightToController(self, request, context):
        """service for traffic lights to controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def controllerToTrafficLight(self, request, context):
        """service for controller to traffic lights
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def controllerToLTA(self, request, context):
        """service for controller to LTA
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LTAToController(self, request, context):
        """service for LTA to controller
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_controllerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'trafficLightToController': grpc.unary_unary_rpc_method_handler(
                    servicer.trafficLightToController,
                    request_deserializer=trafficLight__pb2.Message.FromString,
                    response_serializer=trafficLight__pb2.MessageResponse.SerializeToString,
            ),
            'controllerToTrafficLight': grpc.unary_unary_rpc_method_handler(
                    servicer.controllerToTrafficLight,
                    request_deserializer=trafficLight__pb2.Message.FromString,
                    response_serializer=trafficLight__pb2.MessageResponse.SerializeToString,
            ),
            'controllerToLTA': grpc.unary_unary_rpc_method_handler(
                    servicer.controllerToLTA,
                    request_deserializer=trafficLight__pb2.Message.FromString,
                    response_serializer=trafficLight__pb2.MessageResponse.SerializeToString,
            ),
            'LTAToController': grpc.unary_unary_rpc_method_handler(
                    servicer.LTAToController,
                    request_deserializer=trafficLight__pb2.Message.FromString,
                    response_serializer=trafficLight__pb2.MessageResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'trafficLight.controller', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class controller(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def trafficLightToController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficLight.controller/trafficLightToController',
            trafficLight__pb2.Message.SerializeToString,
            trafficLight__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def controllerToTrafficLight(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficLight.controller/controllerToTrafficLight',
            trafficLight__pb2.Message.SerializeToString,
            trafficLight__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def controllerToLTA(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficLight.controller/controllerToLTA',
            trafficLight__pb2.Message.SerializeToString,
            trafficLight__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LTAToController(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/trafficLight.controller/LTAToController',
            trafficLight__pb2.Message.SerializeToString,
            trafficLight__pb2.MessageResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
